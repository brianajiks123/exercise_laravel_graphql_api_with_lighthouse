scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "MLL\\GraphQLScalars\\Date")
scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")

type Query {
    user(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
        email: Email @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    event(
        id: ID @eq
    ): Event @find

    events(
        name: String @where(operator: "like") @rules(apply: ["prohibits:city", "required_without:city"])
        city: String @where(operator: "like") @rules(apply: ["prohibits:name", "required_without:name"])
    ): [Event!]! @paginate(defaultCount: 10)

    speaker(
        id: ID @eq
    ): Speaker @find

    speakers(
        name: String @where(operator: "like")
    ): [Speaker!]! @paginate(defaultCount: 10)
}

type User {
    id: ID!
    name: String!
    email: Email!
    email_verified_at: DateTime
}

type Event {
    id: ID!
    name: String!
    city: String!
    date: Date
    venue: String!
    online: Boolean!
    speakers: [Speaker!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Speaker {
    id: ID!
    name: String!
    email: Email!
    bio: String!
    photo: String
    linkedin: String
    city: String!
    country: String!
    event: Event @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
    createUser(
        name: String!
        email: Email!
        password: String!
    ): User @create

    updateUser(
        id: ID!
        name: String
        email: Email
        email_verified_at: DateTime
        password: String
    ): User @update

    deleteUser(
        id: ID! @whereKey
    ): User @delete

    createEvent(
        name: String! @rules(apply: ["required", "unique:events,name", "min:3", "max:255"])
        city: String! @rules(apply: ["max:30"], messages: [
            {
                rule: "max"
                message: "City name should not be more than 30 characters"
            }
        ])
        date: Date! @rules(apply: ["required", "App\\Rules\\FutureDate"])
        venue: String! @rules(apply: ["required", "lowercase", "not_in:PC"])
        online: Boolean!
    ): Event @create

    updateEvent(
        id: ID!
        name: String
        city: String
        date: Date
        venue: String
        online: Boolean
    ): Event @update

    deleteEvent(
        id: ID! @whereKey
    ): Event @delete

    createSpeaker(
        name: String! @rules(apply: ["required", "unique:speakers,name", "min:3", "max:255"])
        email: Email! @rules(apply: ["required", "unique:speakers,email", "email"])
        bio: String! @rules(apply: ["required", "min:3", "max:255"])
        photo: String
        linkedin: String
        city: String! @rules(apply: ["required", "min:3", "max:255", "in:Semarang,Yogyakarta,Surabaya"])
        country: String!
        event_id: ID! @rules(apply: ["required", "exists:events,id"])
    ): Speaker @create

    updateSpeaker(
        id: ID!
        name: String
        email: Email
        bio: String
        photo: String
        linkedin: String
        city: String
        country: String
        event_id: ID
    ): Speaker @update

    deleteSpeaker(
        id: ID! @whereKey
    ): Speaker @delete
}
